
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Admin can update any user doc (e.g. to set isDelivery flag)
      allow write: if request.auth.token.email == 'harshsingh9817@gmail.com';
    }

    match /users/{userId}/addresses/{addressId} {
      // Users can manage their own addresses.
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    match /globals/{docId} {
      // Only admins can write to global settings.
      allow write: if request.auth.token.email == 'harshsingh9817@gmail.com';
      // Any authenticated user can read them (e.g., hero text, payment settings).
      allow read: if request.auth != null;
    }

    match /menuItems/{menuId} {
      allow read: if request.auth != null; // All authenticated users can read the menu.
      allow write, delete: if request.auth.token.email == 'harshsingh9817@gmail.com'; // Only admin can edit menu.
    }
    
    match /orders/{orderId} {
      // Any authenticated user can create an order
      allow create: if request.auth != null;
      
      // GET rule: Who can read a single document if they know its ID.
      // This is the most important rule for read security.
      allow get: if request.auth != null && (
      	resource.data.userId == request.auth.uid || // The user who placed it
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isDelivery == true || // Any delivery rider
        request.auth.token.email == 'harshsingh9817@gmail.com' // The admin
      );

      // LIST rule: Who can run queries on the collection.
      // We allow any authenticated user to list, but the `get` rule above
      // prevents them from reading data they shouldn't have access to if they try to fetch all docs.
      // Client-side code is responsible for correctly filtering (e.g., where('userId', '==', uid)).
      allow list: if request.auth != null;

      // UPDATE rule
      allow update: if request.auth != null && (
        // User can update (cancel, review) their own order
        (resource.data.userId == request.auth.uid && (
            'status' in request.resource.data || 'review' in request.resource.data || 'cancellationReason' in request.resource.data
         )) ||
        // Admin or Rider can update status
        (request.auth.token.email == 'harshsingh9817@gmail.com' || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isDelivery == true)
      );
      
      // DELETE rule
      allow delete: if request.auth.token.email == 'harshsingh9817@gmail.com'; // Only admin can delete orders.
    }

    match /riders/{riderId} {
      // Only admin can manage the rider list
      allow read, write, delete: if request.auth.token.email == 'harshsingh9817@gmail.com';
    }

    match /supportTickets/{ticketId} {
      // Any authenticated user can create a ticket.
      allow create: if request.auth != null;
      // Only admins can read, update (resolve), or delete tickets.
      allow read, update, delete: if request.auth.token.email == 'harshsingh9817@gmail.com';
    }

    match /adminMessages/{messageId} {
        // Only admin can create messages
        allow create: if request.auth.token.email == 'harshsingh9817@gmail.com';
        // Users can only read messages sent to them.
        allow read: if request.auth != null && resource.data.userId == request.auth.uid;
        // Admin can read all messages.
        allow read: if request.auth.token.email == 'harshsingh9817@gmail.com';
    }
  }
}
