rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Admins can do anything.
    match /{path=**} {
      allow read, write: if request.auth.token.email == 'harshsingh9817@gmail.com';
    }

    // USERS
    match /users/{userId} {
      allow create: if request.auth.uid == userId;
      // Users can read/update their own profile.
      allow read, update: if request.auth.uid == userId;
    }

    // USER ADDRESSES
    match /users/{userId}/addresses/{addressId} {
      allow read, write: if request.auth.uid == userId;
    }
    
    // ORDERS
    match /orders/{orderId} {
      // ----------------- CUSTOMER PERMISSIONS -----------------
      allow create: if request.auth.uid == request.resource.data.userId;
      
      allow read: if request.auth.uid == resource.data.userId;

      allow update: if 
        // User cancels own order if it was just placed
        (request.auth.uid == resource.data.userId && resource.data.status == 'Order Placed' && request.resource.data.status == 'Cancelled') ||
        // User submits a review for a delivered order
        (request.auth.uid == resource.data.userId && resource.data.status == 'Delivered' && request.resource.data.review != resource.data.review);


      // ----------------- RIDER PERMISSIONS -----------------

      // Riders can read orders that are available for pickup
      allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isDelivery == true
                  && resource.data.isAvailableForPickup == true;
      
      // Riders can read orders that are assigned to them
      allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isDelivery == true
                  && resource.data.deliveryRiderId == request.auth.uid;
                  
      // Riders can accept an order. This rule is highly specific to the transaction.
      allow update: if 
          // Rule applies only to riders
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isDelivery == true &&
          // Pre-conditions (state of order before update)
          resource.data.isAvailableForPickup == true &&
          resource.data.deliveryRiderId == null &&
          // Post-conditions (state of order after update)
          request.resource.data.deliveryRiderId == request.auth.uid &&
          request.resource.data.isAvailableForPickup == false &&
          request.resource.data.status == 'Out for Delivery' &&
          // Integrity check: ensures ONLY the correct fields are being changed
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'deliveryRiderId', 'deliveryRiderName', 'isAvailableForPickup']);
      
      // Riders can mark their own assigned order as delivered
      allow update: if 
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isDelivery == true &&
          resource.data.deliveryRiderId == request.auth.uid &&
          resource.data.status == 'Out for Delivery' &&
          request.resource.data.status == 'Delivered';
    }

    // MENU ITEMS
    match /menuItems/{itemId} {
      // Anyone can read the menu
      allow read: if true;
    }

    // GLOBALS (Hero data, payment settings)
    match /globals/{docId} {
      // Any authenticated user can read them
      allow read: if request.auth != null;
    }

    // SUPPORT TICKETS
    match /supportTickets/{ticketId} {
      // Anyone can create a ticket
      allow create: if true;
      // User can read their own ticket
      allow read: if request.auth.uid == resource.data.userId;
    }
    
    // ADMIN MESSAGES
    match /adminMessages/{messageId} {
      // User can read messages sent to them
      allow read: if request.auth.uid == resource.data.userId;
    }
  }
}
