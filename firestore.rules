
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAdmin() {
      // In a production app, use custom claims. For this app, email is used.
      return request.auth != null && request.auth.token.email == 'harshsingh9817@gmail.com';
    }
    
    function isDeliveryUser() {
      // Check the 'isDelivery' flag on the user's own document in the 'users' collection.
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isDelivery == true;
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    // Collection: menuItems
    match /menuItems/{itemId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Collection: restaurants (Stubbed out)
    match /restaurants/{restaurantId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Collection: globals
    match /globals/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Collection: orders
    match /orders/{orderId} {
      // Users can get their own order, Admin and Delivery can get any order.
      allow get: if isOwner(resource.data.userId) || isAdmin() || isDeliveryUser();
      // Users can query their own orders, Admin and Delivery can query all orders.
      allow list: if (request.query.limit == null || request.query.limit <= 10) && 
                   ((request.query.offset == null || request.query.offset == 0) ? 
                     (isAdmin() || isDeliveryUser()) : (isOwner(request.query.where.value))) || 
                   (isAdmin() || isDeliveryUser());
      allow create: if isOwner(request.resource.data.userId);
      // Admin/Delivery can update any order. Users can only cancel their own order.
      allow update: if isAdmin() || isDeliveryUser() || (isOwner(resource.data.userId) && request.resource.data.status == 'Cancelled');
      allow delete: if isAdmin();
    }

    // Collection: users
    match /users/{userId} {
      // A user can read and write their own document.
      allow get: if isAuthenticated();
      allow create, update: if isOwner(userId);
      // No one can list all users or delete user documents through the client.
      allow list, delete: if false;

      // Addresses subcollection
      match /addresses/{addressId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Collection: riders
    match /riders/{riderId} {
      // Any authenticated user can read the rider list to check for delivery role.
      allow read: if isAuthenticated();
      // Only admin can add/remove riders.
      allow write: if isAdmin();
    }
    
    // Collection: adminMessages
    match /adminMessages/{messageId} {
        allow read: if isOwner(resource.data.userId) || isAdmin();
        allow create: if isAdmin();
        allow update, delete: if false;
    }

    // Collection: supportTickets
    match /supportTickets/{ticketId} {
      allow create: if isAuthenticated();
      allow read, update: if isAdmin();
      allow delete: if false;
    }
  }
}
