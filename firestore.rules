rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to make rules more readable.
    function isAuth() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuth() && request.auth.token.email == 'harshsingh9817@gmail.com';
    }

    // `globals` collection (hero, paymentSettings) should be readable by all authenticated users
    // but only writable by the admin.
    match /globals/{docId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }

    // `menuItems` should be readable by all authenticated users, but only writable by the admin.
    match /menuItems/{menuId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }

    // `users` collection:
    // Admin can read and write to any user document.
    // A user can read and write to their own document.
    match /users/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();

      // Addresses subcollection:
      // A user can manage their own addresses. Admin can also manage them.
      match /addresses/{addressId} {
        allow read, write: if isOwner(userId) || isAdmin();
      }
    }

    // `orders` collection:
    // Admin can read and write any order.
    // A user can create their own order, and read/update their own orders.
    match /orders/{orderId} {
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      allow read, update: if isAdmin() || (isAuth() && resource.data.userId == request.auth.uid);
      allow delete: if isAdmin();

      // Allow a user to cancel their own order only if status is 'Order Placed'
      match /orders/{orderId} where resource.data.status == 'Order Placed' {
        allow update: if isAuth() && resource.data.userId == request.auth.uid && request.resource.data.status == 'Cancelled';
      }
    }
    
    // `adminMessages` collection (for notifications from admin to users):
    // Only admin can create.
    // Users can only read messages sent to them.
    match /adminMessages/{messageId} {
      allow create: if isAdmin();
      allow read: if isAuth() && resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    // `supportTickets` collection:
    // Any authenticated user can create a ticket.
    // Only admin can read the full list and update/delete tickets.
    match /supportTickets/{ticketId} {
      allow create: if isAuth();
      allow read, update, delete: if isAdmin();
    }
  }
}
