
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return request.auth.token.email == 'harshsingh9817@gmail.com';
    }

    // New function to check the isDelivery flag on the user's document
    function isDelivery() {
      // Check if the user document exists and has the isDelivery flag set to true
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isDelivery == true;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    // -- Collections --

    match /menuItems/{item} {
      allow read;
      allow write: if isAdmin();
    }

    match /orders/{orderId} {
        allow create: if isAuthenticated();

        // Rules for reading/querying orders
        allow get: if isAdmin() || isDelivery() || isOwner(resource.data.userId);
        
        // Admins/Riders can list all orders. Users can only list their own.
        allow list: if isAdmin() || isDelivery() || (isAuthenticated() && request.query.where.userId == request.auth.uid);

        // Rules for updating orders
        allow update: if isAdmin() || isDelivery(); // Admins/Riders can update status
    }
    
    match /users/{userId} {
      // Admins can read any user doc. Riders can read their own. Owners can read their own.
      allow read: if isOwner(userId) || isAdmin();
      allow list: if isAdmin(); // Only admins can list all users
      allow create: if request.auth.uid == userId;
      // An owner can update their own doc. We also need to allow the AuthContext to set the `isDelivery` flag.
      // This is safe because isDelivery is determined by the `riders` collection which is admin-only write.
      allow update: if isOwner(userId);

      match /addresses/{addressId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    match /riders/{riderId} {
      // Only admins and other authenticated users need to read the list of riders.
      allow read: if isAuthenticated();
      allow create, delete: if isAdmin();
    }

    match /supportTickets/{ticketId} {
        allow create: if isAuthenticated();
        allow read, update: if isAdmin();
    }

    match /adminMessages/{messageId} {
        allow create: if isAdmin();
        // Users can only read messages sent to them. Admins can read all.
        allow get: if isAdmin() || isOwner(resource.data.userId);
        allow list: if isAdmin() || (isAuthenticated() && request.query.where.field == 'userId' && request.query.where.value == request.auth.uid);
    }
    
    match /globals/{docId} {
      allow read;
      allow write: if isAdmin();
    }
  }
}
