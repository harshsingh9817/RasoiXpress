rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Admins can do anything. This rule is checked first.
    match /{path=**} {
      allow read, write: if request.auth.token.email == 'harshsingh9817@gmail.com';
    }

    // Users can create, read and update their own profiles
    match /users/{userId} {
      allow create: if request.auth.uid == userId;
      allow read, update: if request.auth.uid == userId;
    }

    // Orders collection rules
    match /orders/{orderId} {
      // --- CREATE ---
      // Users can create their own orders.
      allow create: if request.auth.uid == request.resource.data.userId;

      // --- READ ---
      // Users can read their own orders.
      allow read: if request.auth.uid == resource.data.userId;

      // Riders can read orders assigned to them.
      allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isDelivery == true
                  && resource.data.deliveryRiderId == request.auth.uid;

      // Riders can read orders that are available for pickup.
      allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isDelivery == true
                  && resource.data.isAvailableForPickup == true;

      // --- UPDATE ---
      // Users can cancel their own orders if the status is 'Order Placed'.
      allow update: if request.auth.uid == resource.data.userId
                    && request.resource.data.status == 'Cancelled'
                    && resource.data.status == 'Order Placed';
      
      // Riders can accept an available order.
      allow update: if 
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isDelivery == true
          && resource.data.isAvailableForPickup == true
          && resource.data.deliveryRiderId == null
          && request.resource.data.deliveryRiderId == request.auth.uid
          && request.resource.data.isAvailableForPickup == false
          && request.resource.data.status == 'Out for Delivery';
          
      // Riders can mark their assigned order as delivered.
      allow update: if 
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isDelivery == true
          && resource.data.deliveryRiderId == request.auth.uid
          && resource.data.status == 'Out for Delivery'
          && request.resource.data.status == 'Delivered';
    }
    
    // Globals can be read by any authenticated user, written only by admin.
    match /globals/{docId} {
      allow read: if request.auth != null;
      allow write: if request.auth.token.email == 'harshsingh9817@gmail.com';
    }

    // MenuItems can be read by anyone, written only by admin.
    match /menuItems/{itemId} {
      allow read: if true;
      allow write: if request.auth.token.email == 'harshsingh9817@gmail.com';
    }
    
    // Riders can only be managed by admin.
    match /riders/{riderId} {
      allow read, write: if request.auth.token.email == 'harshsingh9817@gmail.com';
    }

    // Support Tickets can be created by anyone, but only read/written by owner or admin.
    match /supportTickets/{ticketId} {
      allow create: if true;
      allow read, write: if request.auth.uid == resource.data.userId 
                      || request.auth.token.email == 'harshsingh9817@gmail.com';
    }
    
    // Admin Messages can be read by the recipient, written only by admin.
    match /adminMessages/{messageId} {
      allow read: if request.auth.uid == resource.data.userId;
      allow write: if request.auth.token.email == 'harshsingh9817@gmail.com';
    }
    
    // Addresses can be managed only by the user who owns them.
    match /users/{userId}/addresses/{addressId} {
      allow read, write: if request.auth.uid == userId;
    }
  }
}
