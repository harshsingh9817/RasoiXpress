
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      // Assumes an 'isAdmin' boolean field in the user's document
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isDelivery() {
       return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isDelivery == true;
    }

    match /globals/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /menuItems/{itemId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /users/{userId} {
      // WARNING: This allows any client to query the users collection.
      // This is required for the "login with phone number" feature to work,
      // but it is insecure. In a production app, this lookup should be 
      // performed by a backend with admin privileges.
      allow list: if true;
      allow get, update: if isOwner(userId) || isAdmin();
      allow create: if isAuth();
    }
    
    match /users/{userId}/addresses/{addressId} {
      allow read, write: if isOwner(userId);
    }

    match /orders/{orderId} {
        allow create: if isOwner(request.resource.data.userId);
        allow read, update: if isOwner(resource.data.userId) || isAdmin() || (isDelivery() && resource.data.deliveryRiderId == request.auth.uid);
        allow delete: if isAdmin();
    }

    match /riders/{riderId} {
      allow read, write: if isAdmin();
    }
    
    match /supportTickets/{ticketId} {
       allow create: if true; // Allow anyone to create a support ticket
       allow read, update, delete: if isAdmin();
    }

    match /adminMessages/{messageId} {
      allow create: if isAdmin();
      allow read: if isOwner(resource.data.userId) || isAdmin();
    }
  }
}
