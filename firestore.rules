
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Admins can read/write anything
    match /{path=**} {
        allow read, write: if request.auth.token.email == 'harshsingh9817@gmail.com';
    }
    
    // Users collection
    match /users/{userId} {
      // Any authenticated user can create their own user document.
      allow create: if request.auth.uid == userId;
      // Users can only read or update their own document.
      // Admin can also update user docs (e.g., to set isDelivery flag).
      allow read, update: if request.auth.uid == userId || request.auth.token.email == 'harshsingh9817@gmail.com';
    }

    // Orders collection
    match /orders/{orderId} {
      // A user can create an order for themselves.
      allow create: if request.auth.uid == request.resource.data.userId;
      
      // A user can read their own orders.
      allow read: if request.auth.uid == resource.data.userId;

      // A user can cancel their own order only if status is 'Order Placed'.
      allow update: if request.auth.uid == resource.data.userId
                      && request.resource.data.status == 'Cancelled'
                      && resource.data.status == 'Order Placed';
      
      // A delivery rider can read orders assigned to them.
      allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isDelivery == true 
                   && request.auth.uid == resource.data.deliveryRiderId;
      
      // A delivery rider can read orders available for pickup.
      allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isDelivery == true
                   && resource.data.isAvailableForPickup == true;
      
      // A delivery rider can accept an order.
      allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isDelivery == true
                      && request.resource.data.deliveryRiderId == request.auth.uid
                      && resource.data.deliveryRiderId == null;

      // A delivery rider can update the status of their assigned order to 'Delivered'.
      allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isDelivery == true
                      && request.auth.uid == resource.data.deliveryRiderId
                      && request.resource.data.status == 'Delivered';
    }

    // Other collections (globals, menuItems, etc.)
    match /globals/{docId} {
        allow read: if request.auth != null;
        allow write: if request.auth.token.email == 'harshsingh9817@gmail.com';
    }
    match /menuItems/{itemId} {
        allow read: if true;
        allow write: if request.auth.token.email == 'harshsingh9817@gmail.com';
    }
    match /riders/{riderId} {
        allow read, write: if request.auth.token.email == 'harshsingh9817@gmail.com';
    }
    match /supportTickets/{ticketId} {
        allow create: if true;
        allow read, write: if request.auth.uid == resource.data.userId || request.auth.token.email == 'harshsingh9817@gmail.com';
    }
    match /adminMessages/{messageId} {
        allow read: if request.auth.uid == resource.data.userId;
        allow write: if request.auth.token.email == 'harshsingh9817@gmail.com';
    }
    match /users/{userId}/addresses/{addressId} {
        allow read, write: if request.auth.uid == userId;
    }
  }
}
