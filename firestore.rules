rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Global Admin Rule: Admins can read/write anything.
    // This rule is evaluated first and grants broad access to the admin user.
    match /{path=**} {
      allow read, write: if request.auth.token.email == 'harshsingh9817@gmail.com';
    }

    // --- Specific Collection Rules ---

    // Users Collection
    match /users/{userId} {
      allow create: if request.auth.uid == userId;
      // Users can read/update their own profile.
      allow read, update: if request.auth.uid == userId;
    }

    // User Addresses Subcollection
    match /users/{userId}/addresses/{addressId} {
      allow read, write: if request.auth.uid == userId;
    }

    // MenuItems Collection
    match /menuItems/{itemId} {
      // Anyone can read the menu.
      allow read: if true;
    }

    // Globals Collection (for hero section, etc.)
    match /globals/{docId} {
      allow read: if true;
    }

    // Orders Collection
    match /orders/{orderId} {
      // CREATE: A user can create an order for themselves.
      allow create: if request.auth.uid == request.resource.data.userId;

      // READ: A customer can read their own order, OR a rider can read an available/assigned order.
      allow read: if (request.auth.uid == resource.data.userId) ||
                    (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isDelivery == true &&
                        (resource.data.isAvailableForPickup == true || resource.data.deliveryRiderId == request.auth.uid));

      // UPDATE: All update logic combined into a single rule.
      allow update: if
        // --- CUSTOMER ACTIONS ---
        (request.auth.uid == resource.data.userId && (
          // Customer cancels a recently placed order.
          (resource.data.status == 'Order Placed' && request.resource.data.status == 'Cancelled' && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'cancellationReason', 'isAvailableForPickup'])) ||
          // Customer leaves a review on a delivered order.
          (resource.data.status == 'Delivered' && request.resource.data.review != resource.data.review && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['review']))
        )) ||
        // --- RIDER ACTIONS ---
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isDelivery == true && (
          // Rider accepts an available order.
          (
            resource.data.isAvailableForPickup == true &&
            resource.data.deliveryRiderId == null &&
            request.resource.data.deliveryRiderId == request.auth.uid &&
            request.resource.data.status == 'Out for Delivery' &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'deliveryRiderId', 'deliveryRiderName', 'isAvailableForPickup'])
          ) ||
          // Rider marks an assigned order as Delivered.
          (
            resource.data.deliveryRiderId == request.auth.uid &&
            resource.data.status == 'Out for Delivery' &&
            request.resource.data.status == 'Delivered' &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'deliveryConfirmationCode', 'isAvailableForPickup'])
          )
        ));
    }

    // Riders Collection
    match /riders/{riderId} {
      allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isDelivery == true;
    }

    // Support Tickets Collection
    match /supportTickets/{ticketId} {
      allow create: if true;
      allow read, update: if request.auth.uid == resource.data.userId;
    }

    // Admin Messages Collection
    match /adminMessages/{messageId} {
      allow read: if request.auth.uid == resource.data.userId;
    }
  }
}
