
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is an admin
    function isAdmin() {
      return request.auth.token.email == 'harshsingh9817@gmail.com';
    }

    // Helper function to check if the user has a delivery role in the database
    function isDeliveryUser(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.isDelivery == true;
    }

    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow authenticated users to read and update their own user document
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      // Also allow admin to read/write all users
      allow read, write: if isAdmin();
    }

    // Allow authenticated users to manage their own addresses
    match /users/{userId}/addresses/{addressId} {
        allow read, write, delete: if request.auth.uid == userId;
    }
    
    // Allow authenticated users to read menu items, hero data, and payment settings
    match /menuItems/{menuItemId} {
      allow read: if request.auth != null;
    }
    match /globals/{docId} {
      allow read: if request.auth != null;
    }
    
    // Allow admins full access to menu, globals, and riders
    match /menuItems/{menuItemId} {
      allow write: if isAdmin();
    }
    match /globals/{docId} {
        allow write: if isAdmin();
    }
    match /riders/{riderId} {
        allow read, write, delete: if isAdmin();
    }
    
    // Order access rules
    match /orders/{orderId} {
      // Customer can read/update (cancel) their own order
      allow read, update: if request.auth.uid == resource.data.userId;

      // Admin can read/update all orders
      allow read, update, delete: if isAdmin();
      
      // Rider can read orders available for pickup
      allow read: if isDeliveryUser(request.auth.uid) && resource.data.isAvailableForPickup == true;

      // Rider can read and update orders assigned to them
      allow read, update: if isDeliveryUser(request.auth.uid) && resource.data.deliveryRiderId == request.auth.uid;

      // Allow order creation
      allow create: if request.auth.uid == request.resource.data.userId;
    }

    // Support Tickets
    match /supportTickets/{ticketId} {
        allow create: if request.auth != null; // Any authenticated user can create
        allow read, write: if isAdmin(); // Only admins can read/write
    }

    // Admin Messages (for notifications)
    match /adminMessages/{messageId} {
        allow create: if isAdmin(); // Only admin can create
        allow read: if request.auth.uid == resource.data.userId; // User can read their own messages
    }
  }
}
