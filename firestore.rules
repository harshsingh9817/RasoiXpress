rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return request.auth.token.email == 'harshsingh9817@gmail.com';
    }

    // Helper function to check if a user is a delivery rider
    function isDelivery() {
      // Check for a 'isDelivery' flag in the user's own document in the 'users' collection
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isDelivery == true;
    }
    
    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Publicly readable collections
    match /globals/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /menuItems/{itemId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // User-specific data
    match /users/{userId} {
      // Users can read/write their own profile.
      // Admins can read/write any profile.
      allow read, update: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
    }

    match /users/{userId}/addresses/{addressId} {
      // Users can manage their own addresses.
      allow read, write: if isOwner(userId) || isAdmin();
    }

    // Orders
    match /orders/{orderId} {
      // Create: Logged-in user creating an order for themselves.
      allow create: if isOwner(request.resource.data.userId);
      
      // Read:
      // 1. The user who owns the order.
      // 2. An admin.
      // 3. A delivery rider if the order is available for pickup or assigned to them.
      allow read: if isOwner(resource.data.userId) || isAdmin() || (isDelivery() && (resource.data.status == 'Confirmed' || resource.data.deliveryRiderId == request.auth.uid));

      // Update:
      // 1. The user who owns the order, but ONLY if they are cancelling it ('Order Placed' status).
      // 2. An admin.
      // 3. A delivery rider, but ONLY if they are accepting it or marking it delivered.
      allow update: if (isOwner(resource.data.userId) && resource.data.status == 'Order Placed' && request.resource.data.status == 'Cancelled') || isAdmin() || (isDelivery() && (request.resource.data.status == 'Out for Delivery' || request.resource.data.status == 'Delivered'));
      
      // Delete: Only admins can delete orders.
      allow delete: if isAdmin();
    }

    // Admin Messages (for users)
    match /adminMessages/{messageId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow write: if isAdmin(); // Admin can send messages
    }
    
    // Support Tickets
    match /supportTickets/{ticketId} {
        allow create: if request.auth.uid == request.resource.data.userId || request.auth.uid == null; // Allow guests to create tickets
        allow read, update: if isAdmin();
    }
    
    // Riders collection (for admin management)
    match /riders/{riderId} {
        allow read, write: if isAdmin();
    }
  }
}
