rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && request.auth.token.email == 'harshsingh9817@gmail.com';
    }

    // Collection: users
    // Users can read their own profile, and admins can read any.
    // Users can create their own profile and update their own displayName and mobileNumber.
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && request.resource.data.keys().hasOnly(['displayName', 'mobileNumber', 'hasCompletedFirstOrder']);
    }

    // Subcollection: addresses within users
    // Users can manage their own addresses.
    match /users/{userId}/addresses/{addressId} {
      allow read, create, update, delete: if isOwner(userId);
    }
    
    // Collection: menuItems
    // Any authenticated user can read the menu. Only admins can create, update, or delete items.
    match /menuItems/{itemId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Collection: globals
    // Any authenticated user can read global settings like hero data and payment settings.
    // Only admins can update these settings.
    match /globals/{docId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }
    
    // Collection: adminMessages
    // Users can only read messages sent specifically to them.
    // Admins can read all messages and create new ones.
    match /adminMessages/{messageId} {
        allow read: if isOwner(resource.data.userId) || isAdmin();
        allow create: if isAdmin();
        allow write: if isAdmin();
    }

    // Collection: supportTickets
    // Any authenticated user can create a support ticket.
    // Users can read their own tickets. Admins can read and update all tickets.
    match /supportTickets/{ticketId} {
        allow create: if isAuthenticated();
        allow read: if (isOwner(resource.data.userId) && resource.data.userId != null) || isAdmin();
        allow update: if isAdmin();
    }

    // Collection: coupons
    // Any authenticated user can read coupons (to verify them).
    // Only admins can create, update, or delete coupons.
    match /coupons/{couponId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }

    // Orders are handled by Supabase, so we explicitly deny all access to the 'orders' collection in Firestore.
    match /orders/{orderId} {
        allow read, write: if false;
    }
  }
}
